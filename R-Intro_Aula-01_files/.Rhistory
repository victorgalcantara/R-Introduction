p_load("tidyverse","rio","ggplot2","ggstatsplot","lubridate","janitor","sjPlot","vcd")
# 0. Packages and Setup ======================================================
library(pacman)
p_load("tidyverse","rio","ggplot2","ggstatsplot","lubridate","janitor","sjPlot","vcd")
x = c(1, 2, 2, 3, 5)
uns = rep(1,5)
sum(x)
mean(x)
x[1]
x[5]
for(i in 1:5) {
print(c(i, x[i]))
}
soma = 0
for(i in 1:5){
soma = soma + x[i]
}
soma/length(x)
soma/length(x)
mean(x)
x%*%uns
x
uns
sum(x)
# y = a x + b
# - a x + y = b
# (-a, 1) (x, y)^' = b
x = seq(0,10, by=0.1)
x
a = -1
b = 10
y = a*x+b
y
plot(x,y, xlim=c(0,10), ylim=c(0,25), type='l', lwd=3)
par(new=T)
sig = 0.1
e = rnorm(length(x), 0, sig)
hist(e, xlim=c(-15,15))
plot(x,y+e, xlim=c(0,10), ylim=c(0,25))
abline(lm(y~x))
# y = a x + c*x^2 + b
x = seq(0,10, by=0.1)
x
a = -1
b = 10
c=1
y = a*x + c*x^2 + b
y
plot(x,y, xlim=c(0,10), ylim=c(-100,100), type='l', lwd=3)
par(new=T)
sig = 3
e = rnorm(length(x), 0, sig)
hist(e, xlim=c(-15,15))
plot(x,y+e, xlim=c(0,10), ylim=c(0,100))
abline(lm(y~x))
# Vetores em R^2 --------------
v = c(1, 2) # 1 linha e 2 colunas
v
t(v)
v
t(v)
plot(1*t(v), xlim=c(0,5), ylim=c(0,5))
par(new=T)
lim = c(-10,20)
plot(rbind(c(0,0),5*t(v)), type='l', xlim=lim, ylim=lim, col=1, lwd=3)
abline(h=0, v=0)
t(v)
for(i in 0:1000){
u = -t(v)*i*0.1
plot(u, xlim=lim, ylim=lim, col=i, lwd=3)
par(new=T)
}
dev.off()
library(tidyverse)
set.seed(123) # seed of memory to reproduct
x1 <- rnorm(1000,6,3) %>% abs() %>%
ifelse(. > 10, 10, .) # educ performance
x2 <- rnorm(1000,1,3) %>% round() %>% abs() # n of pets
x3 = rnorm(1000,2300,700) %>% abs() # mean of household income
plot(x1,x3)
a = 2 # intercept: performance when income = 0
x = 1.8 # effect of income on performance
e = rnorm(1000,0,2) # random error term
y = a*x + e
x = x3/10000 # effect of income on performance
y = a*x + e
plot(x1,y)
plot(y,x3)
y = a*x + e %>% abs()
plot(y,x3)
a = 2 # intercept: performance when income = 0
x = x3/1000 # effect of income on performance
e = rnorm(1000,0,2) # random error term
y = a*x + e %>% abs()
plot(y,x3)
x = 0.0045*x3 # effect of income on performance
y = a*x + e %>% abs()
plot(y,x3)
x = 0.00045*x3 # effect of income on performance
e = rnorm(1000,0,2) # random error term
y = a*x + e %>% abs()
plot(y,x3)
x = 0.00073*x3 # effect of income on performance
e = rnorm(1000,0,2) # random error term
y = a*x + e %>% abs()
plot(y,x3)
x = 0.00032*x3 # effect of income on performance
e = rnorm(1000,0,2) # random error term
y = a*x + e %>% abs()
plot(y,x3)
x = 0.00042*x3 # effect of income on performance
e = rnorm(1000,0,2) # random error term
y = a*x + e %>% abs()
plot(y,x3)
a = 2 # intercept: performance when income = 0
x = 0.00042*x3 # effect of income on performance
e = rnorm(1000,0,3) # random error term
y = a*x + e %>% abs()
plot(y,x3)
e = rnorm(1000,0,3.4) # random error term
y = a*x + e %>% abs()
plot(y,x3)
income = rnorm(1000,2300,700) %>% abs() # mean of household income
income = rnorm(1000,2300,700) %>% abs() # mean of household income
a = 2 # intercept: performance when income = 0
x = 0.00042*income # effect of income on performance
e = rnorm(1000,0,3.4) # random error term
educ = a*x + e %>% abs()
plot(educ,income)
educ = a*x + e %>% abs() %>%
ifelse(. > 10, 10, .) # educ performance
plot(educ,income)
educ = a*x + e %>% abs() %>%
ifelse(. > 10, 10, .) # educ performance
plot(educ,income)
income = rnorm(1000,2300,700) %>% abs() # mean of household income
a = 2 # intercept: performance when income = 0
x = 0.00042*income # effect of income on performance
e = rnorm(1000,0,3.4) # random error term
educ = a*x + e %>% abs() %>%
ifelse(. > 10, 10, .) # educ performance
plot(educ,income)
educ = a*x + e
educ %>% abs() %>%
ifelse(. > 10, 10, .) # educ performance
educ = educ %>% abs() %>%
ifelse(. > 10, 10, .) # educ performance
plot(educ,income)
income = rnorm(1000,2300,700) %>% abs() # mean of household income
a = 2 # intercept: performance when income = 0
x = 0.00042*income # effect of income on performance
e = rnorm(1000,0,3.4) # random error term
educ = a*x + e
educ = educ %>% abs() %>%
ifelse(. > 10, 10, .) # educ performance
plot(educ,income)
a = 2 # intercept: performance when income = 0
x = 0.00082*income # effect of income on performance
e = rnorm(1000,0,3.2) # random error term
educ = a*x + e
educ = educ %>% abs() %>%
ifelse(. > 10, 10, .) # educ performance
plot(educ,income)
abline(lm(educ ~ income))
abline(lm(educ ~ income))
plot(income,educ)
abline(lm(educ ~ income))
m <- matrix(data = c(educ,x2,income),
nrow=1000,ncol = 3)
cov(educ,income)
cor(educ,income)
me_inc = mean(income)
me_edu = mean(educ)
# Standard variables
z_inc = (income - me_inc) / sd(income)
z_edu =   (educ - me_edu) / sd(educ)
# Centring variables
c_inc = (income - me_inc)
c_edu = (educ - me_edu)
hist(income)
hist(c_inc)
hist(z_inc)
hist(income)
hist(c_inc)
hist(income,breaks = 8)
hist(c_inc,breaks = 8)
hist(c_inc,breaks = 8)
hist(income,breaks = 8)
hist(c_inc,breaks = 8)
hist(income,breaks = 1)
hist(income,breaks = 2)
hist(income,breaks = 3)
hist(income,breaks = 4)
hist(c_inc,breaks = 4)
hist(z_inc)
cov(z_inc,z_edu)
cov(c_inc,c_edu)
cor(z_inc,z_edu)
# Packages and setup ------------------------------------------------
devtools::install_github('yihui/xaringan')
# Packages and setup ------------------------------------------------
library(pacman)
p_load("devtools")
devtools::install_github('yihui/xaringan')
devtools::install_github("rstudio/addinexamples", type = "source")
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
getwd()
wd <- "G:/Meu Drive/00 GitHub/R-Introduction/R-Intro_Aula-01_files"
setwd(wd)
